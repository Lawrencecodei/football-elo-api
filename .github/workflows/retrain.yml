name: Nightly Elo retrain

################################################################################
# WHY THIS VERSION WORKS
# ‚Ä¢ Uses `actions/checkout` with fetch-depth 0   (so we can push back).
# ‚Ä¢ Detects whether your code lives in a nested ‚Äúwrapper‚Äù folder and
#   sets WORKDIR accordingly ‚Äî no manual tweaks needed.
# ‚Ä¢ Commits ONLY when data/elo_ratings.pkl   or   data/matches_clean.csv change.
################################################################################

on:
  # 03:10 UTC every day  (‚âà 04:10 WAT).  Adjust to taste.
  schedule:
    - cron: "10 3 * * *"
  # Manual trigger button in the Actions tab
  workflow_dispatch:

jobs:
  retrain:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # allow git push back to main

    steps:
    # --------------------------------------------------------------------- #
    - name: ‚ñ∂Ô∏è  Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # --------------------------------------------------------------------- #
    # Auto-detect working directory.
    # If repo contains a single top-level folder with the repo name,
    # we‚Äôll use that as workdir; otherwise we stay in $GITHUB_WORKSPACE.
    - name: üîç Determine workdir
      id: scope
      run: |
        WRAPPER="$(basename "$GITHUB_REPOSITORY")"
        if [ -d "$WRAPPER" ]; then
          echo "WORKDIR=$WRAPPER" >>"$GITHUB_OUTPUT"
        else
          echo "WORKDIR=."       >>"$GITHUB_OUTPUT"
        fi

    # --------------------------------------------------------------------- #
    - name: üêç  Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    # --------------------------------------------------------------------- #
    - name: üì¶  Install dependencies
      working-directory: ${{ steps.scope.outputs.WORKDIR }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install scikit-learn requests tqdm

    # --------------------------------------------------------------------- #
    - name: üõ†Ô∏è  Run data pipeline
      working-directory: ${{ steps.scope.outputs.WORKDIR }}
      run: python data_pipeline.py

    # --------------------------------------------------------------------- #
    - name: üì§  Commit updated artefacts (if any)
      working-directory: ${{ steps.scope.outputs.WORKDIR }}
      run: |
        git config user.name  "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        CHANGED=0
        git add data/elo_ratings.pkl data/matches_clean.csv || true
        if ! git diff --cached --quiet; then
          CHANGED=1
          git commit -m "ü§ñ nightly retrain: $(date -u +'%Y-%m-%d')" 
          git push origin HEAD:main
        fi

        if [ "$CHANGED" -eq 0 ]; then
          echo "No artefact changes ‚Äî nothing to commit."
        fi
